#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define MAX_TEXT_LENGTH 1000
#define TOP_N 10

double expected_frequency[ALPHABET_SIZE] = {
    0.08167, 0.01492, 0.02782, 0.04253, 0.12702, 0.02228, 0.02015,
    0.06094, 0.06966, 0.00153, 0.00772, 0.04025, 0.02406, 0.06749,
    0.07507, 0.01929, 0.00095, 0.05987, 0.06327, 0.09056, 0.02758,
    0.00978, 0.02360, 0.00150, 0.01974, 0.00074
};


void calculate_frequency(char *text, int *frequency) {
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        frequency[i] = 0;
    }
    for (int i = 0; i < strlen(text); i++) {
        if (isalpha(text[i])) {
            char lower = tolower(text[i]);
            frequency[lower - 'a']++;
        }
    }
}


double calculate_score(int *frequency, int text_length) {
    double score = 0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        double observed_frequency = (double)frequency[i] / text_length;
        score += (observed_frequency - expected_frequency[i]) * 
                 (observed_frequency - expected_frequency[i]);
    }
    return score;
}


void substitute_text(char *text, char *key, char *substituted_text) {
    for (int i = 0; i < strlen(text); i++) {
        if (isalpha(text[i])) {
            char offset = isupper(text[i]) ? 'A' : 'a';
            substituted_text[i] = key[tolower(text[i]) - 'a'] + (isupper(text[i]) ? 'A' : 'a' - 'a');
        } else {
            substituted_text[i] = text[i];
        }
    }
    substituted_text[strlen(text)] = '\0';
}


void generate_substitution_key(char *key) {
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        key[i] = 'a' + i; // Simple identity key for demonstration
    }
}


int main() {
    char ciphertext[MAX_TEXT_LENGTH];
    char substituted_text[MAX_TEXT_LENGTH];
    int frequency[ALPHABET_SIZE];
    double scores[ALPHABET_SIZE];
    char key[ALPHABET_SIZE];

    printf("Enter the ciphertext: ");
    fgets(ciphertext, MAX_TEXT_LENGTH, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove newline character


    generate_substitution_key(key);

    substitute_text(ciphertext, key, substituted_text);


    calculate_frequency(substituted_text, frequency);
    int text_length = strlen(ciphertext);
    double score = calculate_score(frequency, text_length);


    printf("Substituted text: %s\n", substituted_text);
    printf("Score for this substitution: %.5f\n", score);

    return 0;
}
