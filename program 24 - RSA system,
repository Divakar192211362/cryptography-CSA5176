#include <stdio.h>

// Function to find the greatest common divisor (GCD)
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

// Extended Euclidean Algorithm to find the modular inverse
int extended_gcd(int a, int b, int *x, int *y) {
    if (b == 0) {
        *x = 1;
        *y = 0;
        return a;
    }
    int x1, y1;
    int gcd = extended_gcd(b, a % b, &x1, &y1);
    *x = y1;
    *y = x1 - (a / b) * y1;
    return gcd;
}

// Function to find the modular inverse of e modulo phi(n)
int mod_inverse(int e, int phi_n) {
    int x, y;
    int g = extended_gcd(e, phi_n, &x, &y);
    if (g != 1) {
        printf("Modular inverse does not exist.\n");
        return -1;
    } else {
        return (x % phi_n + phi_n) % phi_n;
    }
}

int main() {
    int p = 59, q = 61;  // From trial and error, we find n = 3599 = 59 * 61
    int n = p * q;
    int e = 31;          // Given public key
    int phi_n = (p - 1) * (q - 1);  // Euler's totient function: (p-1) * (q-1)
    
    printf("p: %d, q: %d, n: %d, phi(n): %d\n", p, q, n, phi_n);
    
    // Calculate the private key d
    int d = mod_inverse(e, phi_n);
    if (d != -1) {
        printf("The private key (d) is: %d\n", d);
    }

    return 0;
}
